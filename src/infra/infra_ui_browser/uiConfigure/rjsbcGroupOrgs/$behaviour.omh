If irefContainer
	Do irefContainer.$behaviour(icMode) ## set the TabControl $enabled
End If

Calculate $cinst.$objs.ilSearch1.$enabled as icMode=''
Calculate $cinst.$objs.ilSearch2.$enabled as icMode=''
Calculate $cinst.$objs.ilDisplayRecords.$enabled as icMode=''

Calculate $cinst.$objs.TabControl_GO.$selectedtab as 5
Calculate $cinst.$objs.TabControl_GO.$tabvisible as irUserRights.canKillOrg&ilDisplayRecords.$linecount=1
Calculate $cinst.$objs.pbKill.$enabled as icMode=''&irUserRights.canKillOrg&ilDisplayRecords.$linecount=1

Calculate $cinst.$objs.TabControl_GO.$enabled as icMode=''

Calculate $cinst.$objs.pbAdd.$visible as (inCurrentTab=cnTabCompany|inCurrentTab=cnTabStructure)
Calculate $cinst.$objs.pbEdit.$visible as (inCurrentTab=cnTabCompany|inCurrentTab=cnTabStructure)
Calculate $cinst.$objs.pbDelete.$visible as (inCurrentTab=cnTabCompany|inCurrentTab=cnTabStructure)

If inCurrentTab=cnTabCompany
	Calculate $cinst.$objs.pbAdd.$enabled as irUserRights.canInsertR&$cinst.icMode=''
	Calculate $cinst.$objs.pbEdit.$enabled as (irUserRights.canEdit|irUserRights.canEditR)&irCurrentRecord.GO_SEQ>0&$cinst.icMode=''
	Calculate $cinst.$objs.pbDelete.$enabled as irUserRights.canDeleteR&irCurrentRecord.GO_SEQ>0&icMode=''
Else If inCurrentTab=cnTabStructure
	Calculate $cinst.$objs.pbAdd.$enabled as irUserRights.canInsertS&$cinst.icMode=''&$cinst.$canAddNode()
	Calculate $cinst.$objs.pbEdit.$enabled as irUserRights.canEditS&irCurrentStructure.GS_SEQ>0&$cinst.icMode=''
	Calculate $cinst.$objs.pbDelete.$enabled as irUserRights.canDeleteS&irCurrentStructure.GS_SEQ>0&icMode=''
End If

Calculate $cinst.$objs.pbCancel.$visible as icMode<>''&(inCurrentTab=cnTabCompany|inCurrentTab=cnTabStructure)
Calculate $cinst.$objs.pbSave.$visible as icMode<>''&(inCurrentTab=cnTabCompany|inCurrentTab=cnTabStructure)

Calculate $cinst.$objs.GO_NAME_FULL.$enabled as icMode<>''
Calculate $cinst.$objs.GO_NAME_SHORT.$enabled as icMode<>''
Calculate $cinst.$objs.GO_CURRENCY.$enabled as icMode<>''

Calculate $cinst.$objs.GO_ADDR_BUILDING.$enabled as $cinst.icMode<>''
Calculate $cinst.$objs.GO_ADDR_STREET.$enabled as icMode<>''
Calculate $cinst.$objs.GO_ADDR_LOCALITY.$enabled as icMode<>''
Calculate $cinst.$objs.GO_ADDR_TOWN.$enabled as icMode<>''
Calculate $cinst.$objs.GO_ADDR_STATE.$enabled as icMode<>''
Calculate $cinst.$objs.GO_ADDR_POSTCODE.$enabled as icMode<>''
Calculate $cinst.$objs.GO_ADDR_COUNTRY.$enabled as icMode<>''

Calculate $cinst.$objs.GO_COMM_PH.$enabled as icMode<>''
Calculate $cinst.$objs.GO_COMM_MOB.$enabled as icMode<>''
Calculate $cinst.$objs.GO_COMM_EMAIL.$enabled as icMode<>''

Calculate $cinst.$objs.GO_COMPANY_NO.$enabled as icMode<>''
Calculate $cinst.$objs.GO_VAT_NO.$enabled as $cinst.icMode<>''

Calculate $cinst.$objs.GO_VASP_CODE.$enabled as $cinst.icMode<>''

If inCurrentTab=cnTabStructure
	# Calculate $cinst.$objs.GS_TYPE.$enabled as icMode<>''
	Calculate $cinst.$objs.GS_DESC_SHORT.$enabled as icMode<>''
	Calculate $cinst.$objs.GS_DESC_FULL.$enabled as icMode<>''
	Calculate $cinst.$objs.GS_ORDER.$enabled as icMode<>''
	Calculate $cinst.$objs.GS_ACTIVE.$enabled as icMode<>''
	Calculate $cinst.$objs.ilOrgStructures.$enabled as icMode=''
	Calculate $cinst.$objs.ilCorporateTree.$enabled as icMode=''
	Calculate $cinst.$objs.GS_TYPE.$enabled as icMode<>''
	
End If

Calculate $cinst.$objs.pbClearCurrentLine.$enabled as irCurrentStructure.GS_SEQ>0

# Do $cinst.$objs.ilCorporateTree.$nodedata() Returns lrNodeData

# has anything changed with details to registration server?
# Do irBusinessDetailSubset.$assignrow($cinst.irCurrentRecord,kTrue)
# Do toStrings.$HasRowBeenModified(irBusinessDetailSubset,irBusinessDetailSubsetOrig) Returns lbRegDetailsModified
# If not(lbRegDetailsModified)
# Calculate lbRegDetailsModified as ilDeleteCorpPerson.$linecount>0
# If not(lbRegDetailsModified)
# Calculate llTemp as ilCorporatePerson
# Do llTemp.$search(isclear($ref.CPN_MWHEN),1,0,0,0) Returns lbRegDetailsModified ## someone new added
# If not(lbRegDetailsModified)
# Calculate llTemp.$line as 0
# While $Loop(llTemp)
# Do ilOriginalCorpPersons.$search($ref.CPN_EMAIL=llTemp.CPN_EMAIL,1,0,0,0) Returns lbFound
# If lbFound
# Do toStrings.$HasRowBeenModified(llTemp,ilOriginalCorpPersons) Returns lbRegDetailsModified
# If lbRegDetailsModified
# Break to end of loop
# End If
# End If
# End While
# End If
# End If
# End If
#
#
# Calculate $cinst.$objs.inRegisterType.$enabled as (icMode='')&isclear(irCurrentRecord.GO_MEC_ID)&irCurrentRecord.GO_SEQ>0
#
# Calculate $cinst.$objs.pbAddCorpPerson.$enabled as ibRESTserviceRunning&(icMode='')&inRegisterType>0
# Calculate $cinst.$objs.pbDeleteCorpPerson.$enabled as ibRESTserviceRunning&ilCorporatePerson.$line>0
# Calculate $cinst.$objs.pbRegisterMEC.$enabled as ibRESTserviceRunning&isclear(irCurrentRecord.GO_MEC_ID)&inRegisterType>0
# Calculate $cinst.$objs.pbUpdateMEC.$enabled as ibRESTserviceRunning&irCurrentRecord.GO_MEC_ID<>''&icMode=''&(lbRegDetailsModified|ibRegistrationDoesNotMatchWithServer)
# Calculate $cinst.$objs.pbValidateMEC.$enabled as ibRESTserviceRunning&irCurrentRecord.GO_MEC_ID<>''&icMode=''
If inCurrentTab=2&not(ibRESTserviceRunning)
	Do toStrings.$StringTableEntry('MSG_REGSERVUNAVAILABLE',lcMessage,'Registration server is not available.')
	# Calculate icDisplayMessage as lcMessage
Else If inCurrentTab=2&ibRESTserviceRunning&icDisplayMessage=''
	Do toStrings.$StringTableEntry('MSG_REGSERVAVAILABLE',lcMessage,'Registration server is available.')
	# Calculate icDisplayMessage as lcMessage
End If

Do method assignEntryFieldProperties

Do $cinst.$RegistrationFormBehaviour

Do inherited ## handle objects in the navigation and results panes