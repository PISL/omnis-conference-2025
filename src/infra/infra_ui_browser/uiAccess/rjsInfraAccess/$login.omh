# Breakpoint
Calculate icDisplayMessage as ''

If $ctask.ibThereIswNoDbWithThisApp
	# 2024-06-18 RSM This was introduced in order to facilitate a login from an app within LOGS library
	# that does not connect to its "own" database.
	Do method validateWithoutLogin (pcID,pcPW) Returns lbLoginOK
	
	# n.b. there are no Permissions granted here
Else
	Do trCurrUser.$validate(pcID,pcPW)
End If
If trCurrUser.USR_SEQ<>0&trCurrUser.USR_ACTIVE
	# correctly identified
	If trCurrUser.USR_AC_EXPIRES<#D
		Do toStrings.$StringTableEntry('MSG_LOGINACEXPIRED',icDisplayMessage,'account has expired')
	Else
		Calculate lbLoginOK as kTrue
		
		# does the app allow users to open multiple browser windows
		If tConstants.allowMultipleForms
			# now create a session pool for this user
			# Breakpoint
			Calculate lcPoolName as con(upp(pcID),$connectionid)
			Do $itasks.[tcCurrentLibrary].$OpenSessionPool(lcPoolName,tlDatabases.Host,$itasks.[tcCurrentLibrary].$getVar('irConfigFile.UserName'),$itasks.[tcCurrentLibrary].$getVar('irConfigFile.password'),tlDatabases.DAM,2) Returns lbOK ## new sessions will be added as necessary
			If lbOK
				Do $setVar('icPoolName',lcPoolName)
			Else
				# unable to create a new session pool
				Quit method kFalse
			End If
		Else
			# app will use traditional one session pool functionality
		End If
		
		Calculate trLogAccess.ULA_USR_REF as trCurrUser.USR_SEQ
		Calculate trLogAccess.ULA_LOGIN as $ServerTime()
		Do trLogAccess.$update() Returns lbOK ## the uaLogAccess record is now created in the remote task $construct
	End If
Else If trCurrUser.USR_SEQ>0&isclear(trCurrUser.USR_ACTIVE)
	Do toStrings.$StringTableEntry('MSG_LOGININVALID',icDisplayMessage,'invalid account')
	
Else
	# 2015-01-19 GRS the login form now handles failed attempts and redirection after mutiple failures
	# 2016-02-04 RSM - added db error information to help developer
	Calculate lrErrorInfo as trCurrUser.irErrorSQL
	If lrErrorInfo.NativeErrorText<>''
		Breakpoint
		Do toStrings.$StringTableEntry('MSG_LOGINFAILEDRETRY',lcMessage,'login failed - try again')
		Calculate icDisplayMessage as con(lcMessage,kCr)
		Do toStrings.$StringTableEntry('str_dbissue',lcMessage,'db issue')
		Calculate icDisplayMessage as con(icDisplayMessage,lcMessage,': ',lrErrorInfo.NativeErrorText)
	Else If lrErrorInfo.ErrorText<>''
		Breakpoint
		Do toStrings.$StringTableEntry('MSG_LOGINFAILEDRETRY',lcMessage,'login failed - try again')
		Calculate icDisplayMessage as con(lcMessage,kCr)
		Do toStrings.$StringTableEntry('str_dbissue',lcMessage,'db issue')
		Calculate icDisplayMessage as con(icDisplayMessage,lcMessage,': ',lrErrorInfo.ErrorText)
	Else
		Do toStrings.$StringTableEntry('MSG_LOGINFAILEDRETRY',icDisplayMessage,'login failed - try again')
	End If
	
	Calculate lbLoginOK as kFalse
End If

Calculate pretDisplayMessage as icDisplayMessage

Do $cinst.$behaviour()
Do $cinst.$redraw()

Quit method lbLoginOK