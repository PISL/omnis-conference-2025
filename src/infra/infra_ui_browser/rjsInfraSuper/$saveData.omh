Calculate $cinst.$objs.pbSave.$errortext as ''

Do irCurrentRecord.$validation() Returns lbProceed
If not(lbProceed)
	# Some table classes will return messages in ilValidation... others will return just a string icValidationMessage
	If irCurrentRecord.ilValidation.$linecount
		# ilValidation can include errors AND warnings (see column severity where 1 means warning)
		If 1=0
			Do toStrings.$validationListToMessages(irCurrentRecord.ilValidation,icErrors,icWarnings)
		Else
			# 2024-12-23  RSM  added parameter pcErrorContent do sub class determines message content
			Do toStrings.$validationListTranslate(irCurrentRecord.ilValidation,icErrors,icWarnings,pcErrorContent)
		End If
		
		# If errors are detected they take precedence.  An error message is displayed and saving stops.
		# In other words if errors and warnings are detected only the errors are displayed.
		
		# If there are no errors and warnings exist and ibWarningsIssued is false, display the warning, stop the save and set ibWarningsIssued as kTrue.
		# If there are no errors and warnings exist and ibWarningsIssued is true, continue with the save of data.
		
		If icErrors<>''
			Calculate $cinst.icDisplayMessage as con('record not saved due to ERRORS: ',icErrors) ## !!! stb to be addressed
		Else If ibWarningsIssued
			# do not issue warnings again - save the data
			Calculate $cinst.icDisplayMessage as ''
			Calculate lbProceed as kTrue
		Else
			Calculate $cinst.icDisplayMessage as con('Before saving again, please check these WARNINGS: ',icWarnings) ## !!! stb to be addressed
			Calculate ibWarningsIssued as kTrue
		End If
		
	Else
		Calculate $cinst.icDisplayMessage as irCurrentRecord.icValidationMessage
	End If
	
	Calculate $cinst.$objs.pbSave.$errortext as icDisplayMessage
	
End If
If lbProceed
	If pos('I',icMode)
		Do irCurrentRecord.$insert() Returns lbOK
	Else If pos('E',icMode)
		If irOriginalRecord.icPrimaryKey=irCurrentRecord.icPrimaryKey
			# the original record and current record are referring to same table
			If irOriginalRecord.[irOriginalRecord.icPrimaryKey]=irCurrentRecord.[irCurrentRecord.icPrimaryKey]
				# the original record and current record are referring to same record
				Do toStrings.$HasRowBeenModified(irOriginalRecord,irCurrentRecord,kFalse,,,kFalse,pcOnlyCheckThisPrefix) Returns lbUpdate
			End If
		End If
		If lbUpdate
			Do irCurrentRecord.$update() Returns lbOK
			If lbOK
				If ibEditCheckSemaphore
					Do $DefineList(lrSemaphore,'tsysSemaphores')
					Do lrSemaphore.$clearSemaphore(irCurrentRecord.icPrefix,irCurrentRecord.[irCurrentRecord.icPrimaryKey]) Returns lbOK
					If not(lbOK)
						# this is strange.  The user had the semaphore but cannot clear it.
						If lrSemaphore.icValidationMessage<>''
							Calculate icDisplayMessage as lrSemaphore.icValidationMessage
						Else
							Calculate icDisplayMessage as lrSemaphore.irErrorSQL.NativeErrorText
						End If
						If icDisplayMessage=''
							Calculate icDisplayMessage as 'Record saved but failed to clear semaphore. This will prevent others from modifying this record. Please contact your system administrator.' ## !!! STB entry required.
						End If
					End If
				End If
			End If
		End If
	End If
	If lbOK
		Do irCurrentRecord.$cols.$findname('DisplayName') Returns liColRef
		If liColRef
			Do irCurrentRecord.$DisplayName()
		End If
		
		If pos('I',icMode)
			Calculate icDisplayMessage as $cell($cinst.clLabels,'objName','REC_INSERTED','label') ## record inserted
		Else
			Calculate icDisplayMessage as $cell($cinst.clLabels,'objName','REC_UPDATED','label') ## record updated
		End If
		Calculate irOriginalRecord as irCurrentRecord
		Calculate icMode as ''
		
	Else If not(lbUpdate)
		Calculate icDisplayMessage as $cell($cinst.clLabels,'objName','REC_NOCHANGE','label')
		Quit method kTrue
	Else
		Calculate $cinst.icDisplayMessage as irCurrentRecord.irErrorSQL.NativeErrorText
	End If
End If

Quit method lbOK