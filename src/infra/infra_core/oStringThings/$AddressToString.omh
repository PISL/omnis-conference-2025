If upp(pFormat)='MULTILINE'|upp(pFormat)='1LINE'
	If upp(pFormat)='MULTILINE'&pDelimiter=","
		Calculate pDelimiter as kCr
	End If
	
	If pCapitalise=0 ## as is
		# leave
	Else If pCapitalise=1 ## capitalise
		Calculate pBuilding as cap(pBuilding)
		Calculate pStreet as cap(pStreet)
		Calculate pLocality as cap(pLocality)
		Calculate pTown as cap(pTown)
		# Calculate pState as upp(pBuilding)
		# Calculate pPostcode as cap(pPostcode)
		# Calculate pCountry as cap(pCountry)
		
	Else If pCapitalise=2 ## upper case
		Calculate pBuilding as upp(pBuilding)
		Calculate pStreet as upp(pStreet)
		Calculate pLocality as upp(pLocality)
		Calculate pTown as upp(pTown)
		Calculate pState as upp(pBuilding)
		Calculate pPostcode as upp(pPostcode)
		Calculate pCountry as upp(pCountry)
		
	Else If pCapitalise=3 ## lower case
		Calculate pBuilding as low(pBuilding)
		Calculate pStreet as low(pStreet)
		Calculate pLocality as low(pLocality)
		Calculate pTown as low(pTown)
		# Calculate pState as upp(pBuilding)
		# Calculate pPostcode as cap(pPostcode)
		# Calculate pCountry as cap(pCountry)
		
	End If
	
	If pBuilding<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pBuilding)
	End If
	If pStreet<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pStreet)
	End If
	If pLocality<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pLocality)
	End If
	If pTown<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pTown)
	End If
	If pState<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pState)
	End If
	If pPostcode<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pPostcode)
	End If
	If pCountry<>''
		Calculate lcString as con(lcString,pick(lcString<>'','',pDelimiter),pCountry)
	End If
	
	
Else If upp(pFormat)='2LINES'
	Calculate lnTotalLength as len(pBuilding)+len(pStreet)+len(pLocality)+len(pTown)+len(pState)+len(pPostcode)+len(pCountry)
	Calculate lcString as nam(lcLine1)
	If pBuilding<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pBuilding)
	End If
	If len(lcLine1)>(lnTotalLength/2)
		Calculate lcString as nam(lcLine2)
	End If
	
	If pStreet<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pStreet)
	End If
	If len(lcLine1)>(lnTotalLength/2)
		Calculate lcString as nam(lcLine2)
	End If
	
	If pLocality<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pLocality)
	End If
	If len(lcLine1)>(lnTotalLength/2)
		Calculate lcString as nam(lcLine2)
	End If
	
	If pTown<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pTown)
	End If
	If len(lcLine1)>(lnTotalLength/2)
		Calculate lcString as nam(lcLine2)
	End If
	
	If pState<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pState)
	End If
	If len(lcLine1)>(lnTotalLength/2)
		Calculate lcString as nam(lcLine2)
	End If
	
	If pPostcode<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pPostcode)
	End If
	If len(lcLine1)>(lnTotalLength/2)
		Calculate lcString as nam(lcLine2)
	End If
	
	If pCountry<>''
		Calculate [lcString] as con([lcString],pick([lcString]<>'','',pDelimiter),pCountry)
	End If
	
	Calculate lcString as con(lcLine1,kCr,lcLine2)
End If

Quit method lcString