Calculate icErrors as ''
Calculate icWarnings as ''

If ilData.$linecount>0
	Calculate ilData.$line as 0
	Do ilData.$search(0)
	Do ilData.$search(len($ref.[icColPrefix]CLASS)=0|len($ref.[icColPrefix]VALUE)=0,1,0,1,0)
	While $Loop(ilData,kTrue)
		Calculate lRow as ilData
		If lRow.[icColPrefix]SEQ>=0
			Do lRow.$delete() Returns lbOK
		End If
		Calculate lbDeletes as kTrue
	End While
	Do ilData.$remove(kListDeleteSelected)
	
	While $Loop(ilData)
		Calculate lbUpdateDB as kFalse
		Calculate lRow as ilData
		If lRow.[icColPrefix]SEQ>0
			Do ilOriginal.$search($ref.[icColPrefix]SEQ=lRow.[icColPrefix]SEQ,1,0,0,0) Returns lbFound
			If lbFound
				Do $ctask.toStrings.$HasRowBeenModified(ilOriginal,lRow) Returns lbModified
				If lbModified
					Calculate lbUpdateDB as kTrue
					Do lRow.$update(#NULL,ilData.warningsIssued) Returns lbOK
					If lbOK
						Calculate inUpdates as inUpdates+1
						Calculate ilData.[ilData.$line] as lRow
					Else
						Calculate inUpdatesFailed as inUpdatesFailed+1
						Do $ctask.toStrings.$validationMessages(ilData,lRow.ilValidation,llMessages,lbNewWarning)
					End If
				End If
			End If
		Else
			Calculate lbUpdateDB as kTrue
			If icColPrefix='RFO_'
				Calculate lRow.RFO_GO_REF as ilOrganisations.GO_SEQ
			End If
			Do lRow.$insert(kTrue,#NULL,ilData.warningsIssued) Returns lbOK
			If lbOK
				Calculate inInserts as inInserts+1
				Calculate ilData.[ilData.$line] as lRow
			Else
				Calculate inInsertsFailed as inInsertsFailed+1
				Do $ctask.toStrings.$validationMessages(ilData,lRow.ilValidation,llMessages,lbNewWarning)
			End If
		End If
		
		If lbUpdateDB&lbOK
			Calculate ilData.[ilData.$line] as lRow
		Else If lbUpdateDB&not(lbOK)
			# OK message {line [ilData.$line]: [pick(lRow.icValidationMessage<>'',lRow.irErrorSQL.NativeErrorText,lRow.icvalidationMessage)]}
		End If
	End While
	
	If llMessages.$linecount
		# separate warnings from errors
		Do $ctask.toStrings.$errorsAndWarnings(llMessages,icErrors,icWarnings)
	End If
	
	If icErrors<>'' ## inUpdatesFailed|inInsertsFailed)
		# leave ilOriginal and ilData as is
		OK message {Save to database failed due to:[kCr][icErrors]}
	Else If icWarnings<>''&lbNewWarning
		# leave ilOriginal as is so warnings can be reviewed and corrected
		OK message {Warnings to review before saving again:[kCr][icWarnings]}
	Else
		Calculate ilOriginal as ilData
	End If
End If


If lbDeletes|lbUpdateDB
	If icErrors<>''
		# do not getClassList which executes another $Save and we spiral down into an over growing stack
	Else
		Do method getClassList
	End If
End If

If icErrors<>''
	Quit method kFalse
Else If lbNewWarning
	Quit method kFalse
Else
	Quit method kTrue
End If