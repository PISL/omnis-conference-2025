# this method builds the "allstrings: string table from the database specified in the .libini
# if there is no DB connection to stb in the .libini, nothing will happen
# the connection to the stb DB is done with a local variable which automatically disconnects on destruct

# RSM 2-JUL-19 aded support for dual pass at accessing STB as I work remotely so no VPN still allows me to connect with a local copy.
Do toConfig.$GetDatabases() Returns llDBList
Do llDBList.$search(pos('StringTable',$ref.Name)&eval($ref.validif)=1,1,0,1,0) Returns lnLine
If lnLine=0
	Do llDBList.$search(pos('StringTable',$ref.Name),1,0,1,0) Returns lnLine
End If

Calculate llDBList.$line as 0
Do llDBList.$first(kTrue)
While llDBList.$line
	
	If llDBList.DAM='WebService'
		# these columns are populated later in TRACKER.wsecLogin but we need them here first
		Do tConstants.$cols.$findname('REST_URI') Returns liColRef
		If liColRef
			# column already exists
		Else
			# add REST URI for the Web Server
			Do tConstants.$cols.$add('REST_URI',kCharacter,kSimplechar,255)
			Do tConstants.$cols.$add('ExternalIP',kCharacter,kSimplechar,45) ## allow for IPv6
			Do tConstants.$cols.$add('RESTsessionID',kCharacter,kSimplechar,100)
		End If
		If left(llDBList.Host,4)='http' ## added this check to allow local testing which probably won't be using SSL
			Calculate tConstants.REST_URI as con(llDBList.Host,'/api/',low(tcCurrentLibrary),'/stb/')
		Else
			Calculate tConstants.REST_URI as con('https://',llDBList.Host,llDBList.port,'/api/',tcCurrentLibrary,'/stb/')
		End If
		
		Do method getStringsFromServer Returns llStringsAllDb
		
	Else
		Do method $ConnectToDb (llDBList.Host,'stringsonly','61veM3theT@ble5',llDBList.Name,llDBList.DAM,llDBList.DB,llDBList.port,loSession,loStatement,0) Returns lbOK ## ;;# password ;;#
		If lbOK
			Do $DefineList(llStringsAllDb,'infra.tomStrings')
			Calculate llStringsLibDb as llStringsAllDb
			
			Do llStringsAllDb.$SetSession(loSession,loStatement)
			Do llStringsAllDb.$fetchForLibrary()
			Do llStringsAllDb.$setSession(#NULL,#NULL,kTrue)
			# if there is going to be a second table of stringtable entries
			# a. the method $fetchForLibrary needs to be modified so it doesn't scoop everything up
			# b. a second/subsequent fetch of string table entries needs to go here, in a different list.
			If lbSecondTable
				Do llStringsLibDb.$SetSession(loSession,loStatement)
				Do llStringsLibDb.$fetchForLibrary()
				Do llStringsLibDb.$setSession(#NULL,#NULL,kTrue)
			End If
			
			# 2024-05-06 RSM logoff from string table now
			Do loSession.$logoff() Returns lbOK
		End If
	End If
	
	If lbOK
		# we only want the actual string table entries from omStrings
		# starting with STRINGID which is column 9
		For lnCount from 9 to llStringsAllDb.$colcount step 1
			If len(llStringsAllDb.$cols.[lnCount].$name)=3
				# the column is a reserved word
				Calculate llStringsAllDb.$cols.[lnCount].$name as left(llStringsAllDb.$cols.[lnCount].$name,2)
			End If
			Do llDataAllMem.$cols.$add(llStringsAllDb.$cols.[lnCount].$name,kCharacter,kSimplechar)
		End For
		
		If lbSecondTable
			# duplicate list definition for library strings
			Calculate llDataLibMem as llDataAllMem
		End If
		
		Do llDataAllMem.$merge(llStringsAllDb,kTrue,kFalse,kTrue)
		If lbSecondTable
			Do llDataLibMem.$merge(llStringsLibDb,kTrue,kFalse,kTrue)
		End If
		
		# build list of all string tables in memory
		Do llTables.$cols.$add('name',kCharacter,kSimplechar)
		Do llTables.$cols.$add('path',kCharacter,kSimplechar)
		Do StringTable.$gettablelist(llTables)
		
		# if allstrings exists, deal with allstrings
		Do llTables.$search($ref.name='allstrings',1,0,0,0) Returns lnLine
		If lnLine
			# existing table - merge lists from db and memory
			Do StringTable.$loadlistfromtable('allstrings') Returns llAllStrings
			Do StringTable.$unloadstringtable('allstrings')
			Do llDataAllMem.$merge(llAllStrings,kTrue,kFalse,kFalse)
		End If
		Do StringTable.$loadtablefromlist('allstrings',,llDataAllMem) Returns lnStringTableResult ## this will automatically remove all duplicates based on STRINGID
		
		If lbSecondTable
			# if <library> table exists, deal with <library> strings
			Do llTables.$search($ref.name=tcCurrentLibrary,1,0,0,0) Returns lnLine
			If lnLine
				# this code would copy and remove a second string table ok, but it's establishment didn't resolve the remotemenu problem
				Do StringTable.$loadlistfromtable(low(tcCurrentLibrary)) Returns llLibStrings
				Do StringTable.$unloadstringtable(low(tcCurrentLibrary))
				Do llDataLibMem.$merge(llLibStrings,kTrue,kFalse,kFalse)
			End If
			Do StringTable.$loadtablefromlist(low(tcCurrentLibrary),,llDataLibMem) Returns lnStringTableResult ## this will automatically remove all duplicates based on STRINGID
		End If
		
		# set the language ## copied from OpenStringTable method - trConfig may not be populated yet !
		# If $ctask.trConfig.Language<>''
		# Calculate lcDefaultColumn as $ctask.trConfig.Language
		# Else
		Calculate lcDefaultColumn as 'en'
		# End If
		Do StringTable.$setcolumn(lcDefaultColumn) Returns lnResult
		If lnResult<>1
			Send to trace log (Always log) Error setting default column in string table "allstrings"
		End If
		# Do StringTable.$loadlistfromtable('allstrings') Returns llAllStrings
	End If
	
	If not(lbOK)
		Do llDBList.$next(llDBList.$line,kTrue)
	Else
		Calculate llDBList.$line as 0 ## to stop looping
	End If
End While

# 2024-05-06 RSM Now that the string tables have been built, remove the entries from tlDatabases
Do tlDatabases.$search(pos('STRINGTABLE',upp($ref.Name)),1,0,1,0)
Do tlDatabases.$remove(kListDeleteSelected)
Calculate tlDatabases.$line as 1